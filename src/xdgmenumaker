#!/usr/bin/env python
# coding: utf-8
# vim: set noet ts=4 tw=0:
from __future__ import unicode_literals, print_function, absolute_import, division

import os
import sys
import getopt
try:
	import gtk
	pygtk=True
except ImportError:
	from gi.repository import Gtk
	pygtk=False
import xdg.DesktopEntry as dentry
import xdg.Exceptions as exc
import xdg.BaseDirectory as bd
import ConfigParser
from operator import attrgetter

def gtk_icon_theme_get_default():
	if pygtk:
		return gtk.icon_theme_get_default()
	else:
		return Gtk.IconTheme.get_default()
def gtk_lookup_icon(icon_theme, icon_name, size, no_svg=False, force_svg=False, use_builtin=False, generic_fallback=False, force_size=False):
	flags = None
	if pygtk:
		if no_svg: flags = gtk.ICON_LOOKUP_NO_SVG
		elif force_svg: flags = gtk.ICON_LOOKUP_FORCE_SVG
		if use_builtin: flags &= gtk.ICON_LOOKUP_FORCE_SVG
	else:
		if no_svg: flags = Gtk.IconLookupFlags.NO_SVG
		elif force_svg: flags = Gtk.IconLookupFlags.FORCE_SVG
		if use_builtin: flags &= Gtk.IconLookupFlags.USE_BUILTIN
		if generic_fallback: flags &= Gtk.IconLookupFlags.GENERIC_FALLBACK
		if force_size: flags &= Gtk.IconLookupFlags.FORCE_SIZE
	return icon_theme.lookup_icon(icon_name, size, flags)
	pass

seticon = False
desktop = False
submenu = True
pekwmdynamic = False

de = dentry.DesktopEntry(filename = '/usr/share/desktop-directories/xdgmenumaker-applications.directory')
applications = de.getName().encode('utf-8')
applications_icon = de.getIcon()
de = dentry.DesktopEntry(filename = '/usr/share/desktop-directories/xdgmenumaker-accessories.directory')
accessories = de.getName().encode('utf-8')
accessories_icon = de.getIcon()
de = dentry.DesktopEntry(filename = '/usr/share/desktop-directories/xdgmenumaker-development.directory')
development = de.getName().encode('utf-8')
development_icon = de.getIcon()
de = dentry.DesktopEntry(filename = '/usr/share/desktop-directories/xdgmenumaker-education.directory')
education = de.getName().encode('utf-8')
education_icon = de.getIcon()
de = dentry.DesktopEntry(filename = '/usr/share/desktop-directories/xdgmenumaker-games.directory')
games = de.getName().encode('utf-8')
games_icon = de.getIcon()
de = dentry.DesktopEntry(filename = '/usr/share/desktop-directories/xdgmenumaker-graphics.directory')
graphics = de.getName().encode('utf-8')
graphics_icon = de.getIcon()
de = dentry.DesktopEntry(filename = '/usr/share/desktop-directories/xdgmenumaker-multimedia.directory')
multimedia = de.getName().encode('utf-8')
multimedia_icon = de.getIcon()
de = dentry.DesktopEntry(filename = '/usr/share/desktop-directories/xdgmenumaker-network.directory')
network = de.getName().encode('utf-8')
network_icon = de.getIcon()
de = dentry.DesktopEntry(filename = '/usr/share/desktop-directories/xdgmenumaker-office.directory')
office = de.getName().encode('utf-8')
office_icon = de.getIcon()
de = dentry.DesktopEntry(filename = '/usr/share/desktop-directories/xdgmenumaker-settings.directory')
settings = de.getName().encode('utf-8')
settings_icon = de.getIcon()
de = dentry.DesktopEntry(filename = '/usr/share/desktop-directories/xdgmenumaker-system.directory')
system = de.getName().encode('utf-8')
system_icon = de.getIcon()
de = dentry.DesktopEntry(filename = '/usr/share/desktop-directories/xdgmenumaker-other.directory')
other = de.getName().encode('utf-8')
other_icon = de.getIcon()
# Find out which terminal emulator to use for apps that need to be
# launched in a terminal.
# First see if there is a user specified terminal emulator in the
# xdgmenumaker.cfg file.
try:
	config = ConfigParser.SafeConfigParser()
	config.read(os.path.expanduser('~/.config/xdgmenumaker.cfg'))
	terminal_app = config.get('Terminal', 'terminal')
# if there isn't, on debian and debian-likes, use the alternatives
# system, otherwise default to xterm
except (ConfigParser.NoSectionError, ConfigParser.NoOptionError) as e:
	if os.path.exists('/etc/alternatives/x-terminal-emulator') and os.path.exists('/usr/bin/x-terminal-emulator'):
		terminal_app = '/usr/bin/x-terminal-emulator'
	else:
		terminal_app = 'xterm'

def main(argv):
	global desktop
	global seticon
	global submenu
	global pekwmdynamic
	try:
		opts, args = getopt.getopt(argv, "hinf:", ["help", "icons" ,
			"no-submenu", "pekwm-dynamic", "format="])
	except getopt.GetoptError:
		usage()
		sys.exit(2)
	for opt, arg in opts:
		if opt in ("-h", "--help"):
			usage()
			sys.exit(0)
		elif opt in ("-i", "--icons"):
			seticon = True
		elif opt in ("-n", "--no-submenu"):
			submenu = False
		elif opt in ("--pekwm-dynamic",):
			pekwmdynamic = True
		elif opt in ("-f", "--format"):
			desktop = arg
	if desktop is False:
		usage()
		sys.exit('ERROR: You must specify the output format with -f')
	elif desktop == "fluxbox":
		fluxboxmenu()
	elif desktop == "windowmaker":
		seticon = False
		windowmakermenu()
	elif desktop == "icewm":
		icewmmenu()
	elif desktop == "pekwm":
		pekwmmenu()
	else:
		usage()
		sys.exit(2)

def usage():
	print("""\
USAGE: {app} [OPTIONS]

OPTIONS:
    -f, --format         the output format to use. Valid options are fluxbox, icewm, windowmaker and pekwm
    -i, --icons          enable support for icons in the menus. Only works with fluxbox, icewm
    -n, --no-submenu     do not create a submenu. Does not work with windowmaker
        --pekwm-dynamic  generate dynamic menus for pekwm
    -h, --help           show this help message
  You have to specify the output format using the -f switch.

EXAMPLES:
    xdgmenumaker -f windowmaker
    xdgmenumaker -i -f fluxbox""".format(app=os.path.basename(sys.argv[0])))

class MenuEntry:
	def __init__(self, category, name, icon, command, path):
		self.category = category
		self.name = name
		self.icon = icon
		self.command = command
		self.path = path
	
	def __repr__(self):
		return repr((self.category, self.name, self.icon, self.command,
			self.path))

def icon_full_path(icon):
	# If the icon path is absolute and exists, leave it alone.
	# This takes care of software that has its own icons stored
	# in non-standard directories
	if os.path.exists(icon) == True:
		return icon
	else:
		icon = os.path.basename(icon)
		if icon.endswith('.png'):
			icon = icon.replace('.png', '')
		elif icon.endswith('.svg'):
			icon = icon.replace('.svg', '')
		elif icon.endswith('.xpm'):
			icon = icon.replace('.xpm', '')
		icon_theme = gtk_icon_theme_get_default()
		icon = gtk_lookup_icon(icon_theme, icon, 16, no_svg=True)
		if icon:
			icon = icon.get_filename()
		return icon

def get_entry_info(desktopfile):
	global desktop
	global seticon
	show = True
	de = dentry.DesktopEntry(filename = desktopfile)
	name = de.getName().encode('utf-8')

	if seticon == True:
		# strip the directory and extension from the icon name
		icon = de.getIcon()
		icon = icon_full_path(icon)
	else:
		icon = None

	hidden = de.getHidden()
	if hidden == True:
		show = False
	nodisplay = de.getNoDisplay()
	if nodisplay == True:
		show = False

	# removing any %U or %F from the exec line
	command = de.getExec().partition('%')[0]

	terminal = de.getTerminal()
	if terminal is True:
		command = terminal_app+' -e '+command

	path = de.getPath()
	if not path:
		path = None

	#cleaning up categories and keeping only registered freedesktop.org main categories
	categories = de.getCategories()
	if 'AudioVideo' in categories:
		category = multimedia
	elif 'Audio' in categories:
		category = multimedia
	elif 'Video' in categories:
		category = multimedia
	elif 'Development' in categories:
		category = development
	elif 'Education' in categories:
		category = education
	elif 'Game' in categories:
		category = games
	elif 'Graphics' in categories:
		category = graphics
	elif 'Network' in categories:
		category = network
	elif 'Office' in categories:
		category = office
	elif 'System' in categories:
		category = system
	elif 'Settings' in categories:
		category = settings
	elif 'Utility' in categories:
		category = accessories
	else:
		category = other

	onlyshowin = de.getOnlyShowIn()
	notshowin = de.getNotShowIn()
	# none of the freedesktop registered environments are supported by this anyway
	# http://standards.freedesktop.org/menu-spec/latest/apb.html
	if onlyshowin != []:
		show = False
	if desktop in notshowin:
		show = False
	if show == True:
		return [category, name, icon, command, path]
	else:
		return None

def sortedcategories(applist):
	categories = []
	for e in applist:
		categories.append(e.category)
	categories = sorted(set(categories))
	return categories

def desktopfilelist():
	dirs = []
	# some directories are mentioned twice in bd.xdg_data_dirs, once
	# with and once without a trailing /
	for i in bd.xdg_data_dirs:
		i = i.rstrip('/')
		if i not in dirs:
			dirs.append(i)
	filelist = []
	df_temp = []
	for d in dirs:
		xdgdir = d+'/applications'
		if os.path.isdir(xdgdir):
			for i in os.listdir(xdgdir):
				if i.endswith('.desktop'):
					# for duplicate .desktop files that exist in more
					# than one locations, only keep the first occurence.
					# That one should have precedence anyway (e.g.
					# ~/.local/share/applications has precedence over
					# /usr/share/applications
					if i not in df_temp:
						df_temp.append(i)
						filelist.append(xdgdir+'/'+i)
	return filelist

def menu():
	applist = []
	for desktopfile in desktopfilelist():
		try:
			e = get_entry_info(desktopfile)
			if e is not None:
				applist.append(MenuEntry(e[0], e[1], e[2], e[3], e[4]))
		except exc.ParsingError:
			pass

	sortedapplist = sorted(applist, key=attrgetter('category', 'name'))

	menu = []
	for c in sortedcategories(applist):
		appsincategory = []
		for i in sortedapplist:
			if i.category == c:
				appsincategory.append([i.name, i.icon, i.command,
						i.path])
		menu.append([c, appsincategory])
	return menu

def category_icon(category):
	if category == accessories:
		icon = accessories_icon
	elif category == development:
		icon = development_icon
	elif category == education:
		icon = education_icon
	elif category == games:
		icon = games_icon
	elif category == graphics:
		icon = graphics_icon
	elif category == multimedia:
		icon = multimedia_icon
	elif category == network:
		icon = network_icon
	elif category == office:
		icon = office_icon
	elif category == settings:
		icon = settings_icon
	elif category == system:
		icon = system_icon
	elif category == other:
		icon = other_icon
	else:
		icon = None
	return icon

def fluxboxmenu():
	global seticon
	global submenu
	if submenu is True:
		spacing = '  '
		if seticon == True:
			app_icon = icon_full_path(applications_icon)
			if app_icon is None:
				print('[submenu] ({app})'.format(app=applications))
			else:
				print('[submenu] ({app}) <{icon}>'.format(app=applications, icon=app_icon))
		else:
			print('[submenu] ({app})'.format(app=applications))
	else:
		spacing = ''
	for i in menu():
		category = i[0]
		if seticon == True:
			cat_icon = category_icon(category)
			cat_icon = icon_full_path(cat_icon)
			if cat_icon:
				print('{spc}[submenu] ({cat}) <{icon}>'.format(spc=spacing, cat=category, icon=cat_icon))
			else:
				print('{spc}[submenu] ({cat})'.format(spc=spacing, cat=category))
		else:
			print('{spc}[submenu] ({cat})'.format(spc=spacing, cat=category))
		for j in i[1]:
			# closing parentheses need to be escaped, otherwise they are
			# cropped out, along with everything that comes after them
			name = j[0].replace(')', '\)')
			icon = j[1]
			command = j[2]
			path = j[3]
			if path is not None:
				command = 'cd '+path+' ; '+command
			if icon is None:
				print('{spc}  [exec] ({name}) {{{cmd}}}'.format(spc=spacing, name=name, cmd=commnd))
			else:
				print('{spc}  [exec] ({name}) {{{cmd}}} <{icon}>'.format(spc=spacing, name=name, cmd=commnd, icon=icon))
		print('{spc}[end] # ({cat})'.format(spc=spacing, cat=category))
	if submenu is True:
		print('[end] # ({app})'.format(app=applications))

def windowmakermenu():
	print('"{app}" MENU'.format(app=applications))
	for i in menu():
		category = i[0]
		print(' "{cat}" MENU'.format(cat=category))
		for j in i[1]:
			name = j[0]
			command = j[2]
			print('  "{name}" EXEC {cmd}'.format(name=name, cmd=command))
		print(' "{cat}" END'.format(cat=category))
	print('"{app}" END'.format(app=applications))

def icewmmenu():
	global seticon
	global submenu
	if submenu is True:
		spacing = '  '
		if seticon == True:
			app_icon = icon_full_path(applications_icon)
			if app_icon is None:
				app_icon = "_none_"
			print('menu "{app}" {icon} {{'.format(app=applications, icon=app_icon))
		else:
			print('menu "{app}" _none_ {{'.format(app=applications))
	else:
		spacing = ''
	for i in menu():
		category = i[0]
		cat_icon = category_icon(category)
		cat_icon = icon_full_path(cat_icon)
		if seticon is True and cat_icon is not None:
			print('{spc}menu "{cat}" {icon} {{'.format(spc=spacing, cat=category, icon=cat_icon))
		else:
			print('{spc}menu "{cat}" _none_ {{'.format(spc=spacing, cat=category))
		for j in i[1]:
			name = j[0]
			icon = j[1]
			command = j[2]
			if seticon is True and icon is not None:
				print('{spc}  prog "{name}" {icon} {cmd}'.format(spc=spacing, name=name, icon=icon, cmd=command))
			else:
				print('{spc}  prog "{name}" _none_ {cmd}'.format(spc=spacing, name=name, cmd=command))
		print(spacing + '}')
	if submenu is True:
		print('}')

def pekwmmenu():
	global seticon
	global submenu
	global pekwmdynamic
	if pekwmdynamic is True:
		print("Dynamic {")
		dspacing = '  '
	else:
		dspacing = ''
	if submenu is True:
		spacing = '  '
		if seticon == True:
			app_icon = icon_full_path(applications_icon)
			print('{dspc}Submenu = "{app}" {{ Icon = "{icon}"'.format(dspc=dspacing, app=applications, icon=app_icon))
		else:
			print('{dspc}Submenu = "{app}" {{'.format(dspc=dspacing, app=applications))
	else:
		spacing = ''
	for i in menu():
		category = i[0]
		cat_icon = category_icon(category)
		cat_icon = icon_full_path(cat_icon)
		if seticon is True and cat_icon is not None:
			print('{dspc}{spc}Submenu = "{cat}" {{ Icon = "{icon}"'.format(dspc=dspacing, spc=spacing, cat=category, icon=cat_icon))
		else:
			print('{dspc}{spc}Submenu = "{cat}" {{'.format(dspc=dspacing, spc=spacing, cat=category))
		for j in i[1]:
			name = j[0]
			icon = j[1]
			# for some apps (like netbeans) the command is launched with
			# /bin/sh "command"
			# and the quotes get mixed up with the quotes pekwm puts
			# around Actions, so we're just stripping the quotes
			command = j[2].replace('"', '')
			path = j[3]
			if path is not None:
				# pekwm doesn't like "cd path ; command", but it works
				# with "&&" and "||", so we'll launch the command even if the
				# path does not exist
				command = 'cd '+path+' && '+command+' || '+command
			if seticon is True and icon is not None:
				print('{dspc}{spc}  Entry = "{name}" {{ Icon = "{icon}"; Actions = "Exec {cmd} &" }}'.format(dspc=dspacing, spc=spacing, name=name, icon=icon, cmd=command))
			else:
				print('{dspc}{spc}  Entry = "{name}" {{ Actions = "Exec {cmd} &" }}'.format(dspc=dspacing, spc=spacing, name=name, cmd=command))
		print(dspacing + spacing + '}')
	if submenu is True:
		print(dspacing+'}')
	if pekwmdynamic is True:
		print("}")

if __name__ == "__main__":
	main(sys.argv[1:])
